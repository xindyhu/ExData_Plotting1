l <- format(round(l,3), scientific = FALSE)
parse(text=l)
}
postscript("wkm conc boxplot panel_3row.eps", horizontal = FALSE, onefile = FALSE, paper = "special", height = 8, width = 26)
bp<-ggplot(l.wkm, aes(x = group, y = value, fill = group)) +
geom_boxplot() + theme_bw()+
facet_wrap(~ variable, nrow=3,scales="free_y")+ scale_y_continuous(trans='log2',"Serum PFASs (ng/mL)",labels = NotFancy)
bp<-bp+scale_fill_manual(name = FALSE, values = c("blue4","forestgreen", "darkred") , labels = c("Whalers", "Children", "Mothers"))
bp<-bp + theme(axis.text=element_text(size=16), axis.text.x=element_text(hjust=1,angle=90), axis.text.y=NULL, axis.title=element_text(size=18,face="bold"),
legend.text=element_text(size=16),strip.text = element_text(size=16),legend.title=element_blank(),legend.position='top',legend.direction='horizontal')
bp
dev.off()
summary(M1)
library(readxl)
library(lattice)
library(mgcv)
library(gplots)
read_excel_allsheets <- function(filename) {
sheets <- readxl::excel_sheets(filename)
x <-    lapply(sheets, function(X) readxl::read_excel(filename, sheet = X))
names(x) <- sheets
x
}
gravel<-read_excel_allsheets('Gravel Microtoposite_daily.xlsx')
gravel.BDR<-gravel[[1]][1:1820,1:11]
gravel.MND<-gravel[[2]][1:1820,1:11]
gravel.FLT<-gravel[[3]][1:1820,1:11]
gravel.DEP<-gravel[[4]][1:1820,1:11]
gravel.master<-rbind(gravel.BDR,gravel.MND,gravel.FLT,gravel.DEP)
gravel.master$date <- as.Date(with(gravel.master, paste(Year, Month, Day,sep="-")), "%Y-%m-%d")
pk<-read_excel_allsheets('Pk Microtoposite_daily.xlsx')
pk.BDR<-pk[[1]][1:1820,1:11]
pk.MND<-pk[[2]][1:1820,1:11]
pk.FLT<-pk[[3]][1:1820,1:11]
pk.DEP<-pk[[4]][1:1820,1:11]
pk.master<-rbind(pk.BDR,pk.MND,pk.FLT,pk.DEP)
pk.master$date <- as.Date(with(pk.master, paste(Year, Month, Day,sep="-")), "%Y-%m-%d")
till<-read_excel_allsheets('Till Microtoposite_daily.xlsx')
till.BDR<-till[[1]][1:1820,1:11]
till.MND<-till[[2]][1:1820,1:11]
till.FLT<-till[[3]][1:1820,1:11]
till.DEP<-till[[4]][1:1820,1:11]
till.master<-rbind(till.BDR,till.MND,till.FLT,till.DEP)
till.master$date <- as.Date(with(till.master, paste(Year, Month, Day,sep="-")), "%Y-%m-%d")
#combine datasets
master<-rbind(gravel.master,pk.master,till.master)
#create date variable
master[,6:11]<-sapply(master[,6:11],as.numeric)
#create average water and temp
master$temp.mean<-rowSums(cbind(master$Temp1,master$Temp2,master$Temp3),na.rm=T)/3
master$water.mean<-rowSums(cbind(master$Water1,master$Water2,master$Water3),na.rm=T)/3
#set Treatment's reference level to Flat
master$Treatment<-factor(master$Treatment, levels=c('Flat','Boulder','Depression','Mound'))
master<-transform(master,time=as.numeric(date))
#visualization
png("temp_ts_071717.png", width=5, height=7, pointsize=9, unit="in", res= 300)
xyplot(temp.mean~date|Substrate, group=master$Treatment, data=master,type='o',
layout = c(1, 3),
col=c('lightblue','darkblue','darkorange','lightgoldenrod1'),alpha=0.5,
main='Temperature time series by treatment and substrate',
ylab='Mean soil temperature (degree C)',
key=list(space="top",columns=4,between=0,
lines=list(col=c('lightblue','darkblue','darkorange','lightgoldenrod1'),lwd=2),
text=list(c('Flat','Boulder','Depression','Mound'))))
dev.off()
png("water_ts_071717.png", width=5, height=7, pointsize=9, unit="in", res= 300)
xyplot(water.mean~date|Substrate, group=master$Treatment, data=master,type='o',
layout = c(1, 3),
col=c('lightblue','darkblue','darkorange','lightgoldenrod1'),alpha=0.5,
main='Moisture time series by treatment',
key=list(space="top",columns=4,between=0,
lines=list(col=c('lightblue','darkblue','darkorange','lightgoldenrod1'),lwd=2),
text=list(c('Flat','Boulder','Depression','Mound'))))
dev.off()
#GAM model
M1 <- gam(temp.mean~ s(time,bs = "cr",fx=FALSE,k=60,by=Treatment)+s(Year,bs = "cr",fx=FALSE,by=Treatment,k=4)+
as.factor(Treatment)+as.factor(Substrate)+water.mean,
data=master, family = gaussian, na.action=na.omit)
summary(M1)
sessionInfo()
library(qwraps2)
install.packages("KernSmooth")
library("KernSmooth")
x<-4L
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10
)
cbind(x,y)
x <- list(2, "a", "b", TRUE)
x[[1]]
class(x[[1]])
x<2
x<-2
x
df<-read.csv('/Users/cindyhu/Downloads/hw1_data.csv')
colnames(df)
df[1:2,]
dim(df)
tail(df)
df$Ozone[47]
table(is.na*df$Ozone)
table(is.na(df$Ozone))
mean(df$Ozone,na.rm=T)
subset<-df[df$Ozone>31&&df$Temp>90,]
df$Ozone>31&&df$Temp>90
df$Ozone>31
df$Ozone>90
subset<-df[df$Ozone>31&df$Temp>90,]
mean(subset$Solar.R)
mean(subset$Solar.R, na.rm=T)
mean(df$Temp[df$Month==6])
max(df$Temp[df$Month==5])
max(df$Ozone[df$Month==5])
max(df$Ozone[df$Month==5], na.rm=T)
x <- 1:4
y <- 2:3.
x+y
df<-read.csv('/Users/cindyhu/Downloads/hw1_data.csv')
colnames(df)
df[1:2,]
dim(df)
df[-c(1:2),]
tail(df,2)subset<-df[df$Ozone>31&df$Temp>90,]
tail(df,2)
df$Ozone[47]
table(is.na(df$Ozone))
mean(df$Ozone, na.rm=T)
subset<-df[df$Ozone>31&df$Temp>90,]
mean(subset$Solar.R, na.rm=T)
mean(df$Temp[df$Month==6])
mean(df$Temp[df$Month==6])
max(df$Ozone[df$Month==5], na.rm=T)
install.packages("swirl")
packageVersion('swirl')
library(swirl)
rm(list=ls())
install_from_swirl("R Programming")
swirl()
head(flags)
dim(flags)
class(flags)
cls_lst<-lapply(flags,class)
cls_lst
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags,class)
class( cls_vect)
play()
cls_vect
nxt()
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5,
5, 6, 6))
unique_vals<-lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
x<-1:10
if(x>5){print(x)}
cube <- function(x, n) {
x^3
}
cube(3)
ls(environment(cube))
x
cube(2,3)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
testvec<-makeVector(c(1,2,3,4,5))
cachemean(testvec)
## These two functions will cache the inverse of a matrix such that inverse of a matrix will be stored rather
## than being computed repeatedly
## This function creates a special "matrix" object that can cache its inverse, which is really a list containing
## a function to:
## 1. set the value of the matrix
## 2. get the value of the matrix
## 3. set the value of the inverse
## 4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## This following function calculates the mean of the special "matrix" created with the above function.
## First it checks to see if the inverse has already been calcualted. If so, it gets the inverse from the cache
## Otherwise, it calculates the inverse of the matrix and sets the value of the inverse in the cache via the
## setsolve function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
matrix(5,10,10)
matrix(rnorm(100),10,10)
testmat<-makeCacheMatrix(matrix(rnorm(25),5,5))
cacheSolve(testmat)
testmat
cacheSolve(testmat)
solve(matrix(rnorm(25),5,5))
data<-rnorm(25)
testmat<-makeCacheMatrix(matrix(data,5,5))
cacheSolve(testmat)
solve(matrix(data,5,5))
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
swirl()
install_course("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
symmary(pollution$pm25)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm,col = 'blue')
abline(h=12)
hist(ppm,col='green')
rug(ppm)
low
high
hist(ppm, col='green',breaks = 100)
rug(ppm)
hist(ppm, col='green')
abline(v=12)
abline(v=12,lwd=2)
abline(v=median(ppm),col='magenta',lwd=4)
names(pollution)
reg<-table(pollution$region)
reg
barplot(reg,col='wheat',main='Number of Counties in Each Region')
boxplot(pm25~region,data=pollution, col='red')
par(mfrow=c(2,1),mar=c(4,4,2,1))
east<-subset(pollution, region=='east')
head(east)
his(east$pm25,col='green')
hist(east$pm25,col='green')
west<-subset(pollution, region=='west')
hist(subset(pollution,region=="west")$pm25, col = "green")
with(pollution, plot())
with(pollution, plot
)
with(pollution, plot(latitude, pm25)
)
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,pollution$ppm,col=pollution$region)
plot(pollution$latitude,ppm,col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow = c(1,
| 2), mar = c(5, 4, 2, 1))
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west<-subset(pollution,region='west')
west<-subset(pollution,region=='west')
plot(west$latitude,west$pm25,main='West')
plot(east$latitude,east$pm25,main='East')
read.table('../household_power_consumption.txt',sep='\t')
setwd("~/iCloud Drive (Archive)/Documents/Courses/EDAcoursera/ExData_Plotting1")
read.table('../household_power_consumption.txt')
dt<-read.table('../household_power_consumption.txt')
head(dt)
dt<-read.table('../household_power_consumption.txt', sep='/t', header = T)
dt<-read.table('../household_power_consumption.txt', sep='\t', header = T)
dt<-read.delim('../household_power_consumption.txt', header = T)
dt<-read.delim('../household_power_consumption.txt', header = T, na.strings = '?')
head(dt)
dt<-read.delim('../household_power_consumption.txt', sep = ';',header = T, na.strings = '?')
head(dt)
?as.Date
df$Date<-as.Date(df$Date,"%d/%m/%Y")
as.Date('16/12/2006',"%d/%m/%Y")
dt$Date<-as.Date(dt$Date,"%d/%m/%Y")
dt2<-dt[dt$Date==as.Date('2007-02-01')|dt$Date==as.Date('2007=02-02'),]
dt2<-dt[dt$Date==as.Date('2007-02-01','%Y-%m-%d')|
dt$Date==as.Date('2007=02-02','%Y-%m-%d'),]
dt2<-dt[dt$Date==as.Date('2007-02-01','%Y-%m-%d')|
dt$Date==as.Date('2007-02-02','%Y-%m-%d'),]
hist(dt2$Global_active_power,breaks = 12,col = 'red',
main='Global Active Power', xlab='Global Active Power (kilowatts)',
ylab='Frequency')
png(filename = "plot1.png",
width = 480, height = 480, units = "px", pointsize = 12)
hist(dt2$Global_active_power,breaks = 12,col = 'red',
main='Global Active Power', xlab='Global Active Power (kilowatts)',
ylab='Frequency')
dev.off()
head(dt2)
plot(Global_active_power~Time,data = dt2)
rug(x=c('Thu','Fri','Sat'))
plot(Global_active_power~as.factor(weekdays(dt2$Date)),data = dt2, ylab='Global Active Power (kilowatts)')
plot(Global_active_power~Time,data = dt2, ylab='Global Active Power (kilowatts)')
plot(Global_active_power~Time,data = dt2,
ylab='Global Active Power (kilowatts)',xlab=as.factor(weekdays(dt2$Date)))
axis(side=1, labels=weekdays(dt2$Date))
axis(side=1, at=dt2$Date, labels=weekdays(dt2$Date))
axis(side=1, at=dt2$Time, labels=weekdays(dt2$Date))
strptime()
?strptime
dt2$datetime<-strptime(c(dt2$Date,dt2$Time),"%Y/%m/%d %H:%M:%S")
cbind(dt2$Date,dt2$Time)
dt2$datetime<-strptime(cbind(dt2$Date,dt2$Time),"%Y/%m/%d %H:%M:%S")
head)(df2)
head(dt2)
axis(side=1, at=dt2$Date['00:00:00'], labels=c('Thu','Fri','Sat'))
axis(side=1, at=dt2$Time[c('00:00:00','00:00:00','00:00:00')], labels=c('Thu','Fri','Sat'))
axis(side=1, at=dt2$Time['00:00:00'], labels=c('Thu','Fri','Sat'))
dt2$datetime<-cbind(dt2$Date,dt2$Time)
head(dt2)
dt2$datetime<-cbind(as.character(dt2$Date),as.character(dt2$Time))
head(dt2)
dt2$datetime<-paste(as.character(dt2$Date),as.character(dt2$Time))
head(dt2)
dt2$datetime<-strptime(dt2$datetime,"$Y-%m-%d %H:%M:%S")
head(dt2)
dt2$datetime<-strptime(dt2$datetime,"$Y-%m-%d  %H:%M:%S")
dt2$datetime<-paste(as.character(dt2$Date),as.character(dt2$Time))
dt2$datetime<-strptime(dt2$datetime,"$Y-%m-%d  %H:%M:%S")
head*dt2
head(dt2)
dt2$datetime<-paste(as.character(dt2$Date),as.character(dt2$Time))
head(dt2)
dt2$datetime<-strptime(dt2$datetime,"%Y-%m-%d %H:%M:%S")
head(dt2)
plot(Global_active_power~datetime,data = dt2,
ylab='Global Active Power (kilowatts)',xlab=as.factor(weekdays(dt2$Date)))
plot(Global_active_power~datetime,data = dt2,
ylab='Global Active Power (kilowatts)')
class(dt2$datetime)
as.Date(dt2$datetime)
plot(Global_active_power~datetime,data = dt2,
ylab='Global Active Power (kilowatts)')
class(dt2$datetime)
plot(Global_active_power~as.POSIXct(datetime),data = dt2,
ylab='Global Active Power (kilowatts)')
plot(Global_active_power~as.POSIXct(datetime),data = dt2, type='l',
ylab='Global Active Power (kilowatts)')
axis(side=1, at=dt2$Time['00:00:00'], labels=c('Thu','Fri','Sat'))
png(filename = "plot2.png",
width = 480, height = 480, units = "px", pointsize = 12)
plot(Global_active_power~as.POSIXct(datetime),data = dt2, type='l',
ylab='Global Active Power (kilowatts)',xlab='')
#axis(side=1, at=dt2$Time['00:00:00'], labels=c('Thu','Fri','Sat'))
dev.off()
head(dt2)
plot(Sub_metering_1~as.POSIXct(datetime),data = dt2, type='l', col='black',
ylab='Energy sub metering')
plot(Sub_metering_1~as.POSIXct(datetime),data = dt2, type='l', col='black',
ylab='Energy sub metering',xlab="")
line(Sub_metering_3~as.POSIXct(datetime),data = dt2, type='l', col='blue')
?line
?matplot
matplot(dt2[,c('Sub_metering_1','Sub_metering_2','Sub_metering_3','datetime')],
col=c('black','red','blue'), type='l', lty=1, axes=FALSE)
axis(1, c(0,10,20,30), c(0,10,20,30))
summary(dt2$Sub_metering_2)
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3'), col=c('black','red','blue'), lty=1, cex=.65)
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3'), col=c('black','red','blue'), lty=1, cex=.65)
matplot(dt2[,c('Sub_metering_1','Sub_metering_2','Sub_metering_3','datetime')],
col=c('black','red','blue'), type='l', lty=1, axes=FALSE,ylab='Sub metering')
axis(1)
axis(2)
box() #- to make it look "as usual"
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3'), col=c('black','red','blue'), lty=1, cex=.65)
matplot(dt2[,c('Sub_metering_1','Sub_metering_2','Sub_metering_3','datetime')],
col=c('black','red','blue'), type='l', lty=1, axes=FALSE,ylab='Energy sub metering')
axis(1,)
axis(2)
box() #- to make it look "as usual"
axis(1,at=dt2$Time['00:00:00'], labels=c('Thu','Fri','Sat'))
head(dt2$datetime)
tail(dt2$Time)
tail(dt2$datetime)
axis(1,at=dt2$datetime[c('2007-02-01 00:00:00',"2007-02-02 00:00:00",'2007-02-02 23:59:00')],
labels=c('Thu','Fri','Sat'))
dt2$datetime<-as.POSIXct(strptime(dt2$datetime,"%Y-%m-%d %H:%M:%S"))
matplot(dt2[,c('Sub_metering_1','Sub_metering_2','Sub_metering_3','datetime')],
col=c('black','red','blue'), type='l', lty=1, axes=FALSE,ylab='Energy sub metering')
axis(1,at=dt2$datetime[c('2007-02-01 00:00:00',"2007-02-02 00:00:00",'2007-02-02 23:59:00')],
labels=c('Thu','Fri','Sat'))
matplot(dt2[,c('Sub_metering_1','Sub_metering_2','Sub_metering_3','datetime')],
col=c('black','red','blue'), type='l', lty=1, axes=FALSE,ylab='Energy sub metering')
axis(2)
box() #- to make it look "as usual"
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3'), col=c('black','red','blue'), lty=1, cex=.65)
axis(1,labels = c('Thu','Fri','Sat'))
line(dt2Sub_metering_3~as.POSIXct(datetime),data = dt2, type='l', col='blue')
plot(Sub_metering_1~as.POSIXct(datetime),data = dt2, type='l', col='black',
ylab='Energy sub metering',xlab="")
lines(dt2Sub_metering_3~as.POSIXct(datetime),data = dt2, type='l', col='blue')
lines(dt2$Sub_metering_3~as.POSIXct(datetime),data = dt2, type='l', col='blue')
lines(Sub_metering_3~as.POSIXct(datetime),data = dt2, type='l', col='blue')
lines(Sub_metering_2~as.POSIXct(datetime),data = dt2, type='l', col='red')
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3'), col=c('black','red','blue'), lty=1, cex=.65)
dev.off()
#plot3
png(filename = "plot2.png",
width = 480, height = 480, units = "px", pointsize = 12)
plot(Sub_metering_1~as.POSIXct(datetime),data = dt2, type='l', col='black',
ylab='Energy sub metering',xlab="")
lines(Sub_metering_2~as.POSIXct(datetime),data = dt2, type='l', col='red')
lines(Sub_metering_3~as.POSIXct(datetime),data = dt2, type='l', col='blue')
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3'), col=c('black','red','blue'), lty=1, cex=.65)
dev.off()
png(filename = "plot3.png",
width = 480, height = 480, units = "px", pointsize = 12)
#plot3
png(filename = "plot3.png",
width = 480, height = 480, units = "px", pointsize = 12)
plot(Sub_metering_1~as.POSIXct(datetime),data = dt2, type='l', col='black',
ylab='Energy sub metering',xlab="")
lines(Sub_metering_2~as.POSIXct(datetime),data = dt2, type='l', col='red')
lines(Sub_metering_3~as.POSIXct(datetime),data = dt2, type='l', col='blue')
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3'), col=c('black','red','blue'), lty=1, cex=.65)
dev.off()
png(filename = "plot3.png",
width = 480, height = 480, units = "px", pointsize = 12)
plot(Sub_metering_1~as.POSIXct(datetime),data = dt2, type='l', col='black',
ylab='Energy sub metering',xlab="")
lines(Sub_metering_2~as.POSIXct(datetime),data = dt2, type='l', col='red')
lines(Sub_metering_3~as.POSIXct(datetime),data = dt2, type='l', col='blue')
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3'), col=c('black','red','blue'), lty=1, cex=.65)
dev.off()
#plot2
png(filename = "plot2.png",
width = 480, height = 480, units = "px", pointsize = 12)
plot(Global_active_power~as.POSIXct(datetime),data = dt2, type='l',
ylab='Global Active Power (kilowatts)',xlab='')
#axis(side=1, at=dt2$Time['00:00:00'], labels=c('Thu','Fri','Sat'))
dev.off()
par(mfrow=c(2,2))
head(dt2)
plot(Voltage~as.POSIXct(datetime),data = dt2, type='l',
ylab='Global Active Power (kilowatts)',xlab='datetime')
plot(Voltage~as.POSIXct(datetime),data = dt2, type='l',
ylab='Global Active Power (kilowatts)',xlab='datetime')
x11()
plot(Voltage~as.POSIXct(datetime),data = dt2, type='l',
ylab='Global Active Power (kilowatts)',xlab='datetime')
plot(Global_reactive_power~as.POSIXct(datetime),data = dt2, type='l',
ylab='Global_reactive_power',xlab='datetime')
png(filename = "plot4.png",
width = 480, height = 480, units = "px", pointsize = 12)
par(mfrow=c(2,2))
#panel 1
plot(Global_active_power~as.POSIXct(datetime),data = dt2, type='l',
ylab='Global Active Power',xlab='')
#panel 2
plot(Voltage~as.POSIXct(datetime),data = dt2, type='l',
ylab='Voltage',xlab='datetime')
#panel 3
plot(Sub_metering_1~as.POSIXct(datetime),data = dt2, type='l', col='black',
ylab='Energy sub metering',xlab="")
lines(Sub_metering_2~as.POSIXct(datetime),data = dt2, type='l', col='red')
lines(Sub_metering_3~as.POSIXct(datetime),data = dt2, type='l', col='blue')
legend('topright', c('Sub_metering_1','Sub_metering_2','Sub_metering_3'), col=c('black','red','blue'), lty=1, cex=.65)
#panel 4
plot(Global_reactive_power~as.POSIXct(datetime),data = dt2, type='l',
ylab='Global_reactive_power',xlab='datetime')
dev.off()
